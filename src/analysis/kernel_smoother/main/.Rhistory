extended
extended$pos=c(seq(1,max_pos))
extended
 extended=matrix(ncol=2,nrow=max_pos)         
    colnames(counts)=c("pos","raw_counts")
head(extended)
    extended=matrix(ncol=2,nrow=max_pos)         
    colnames(extended)=c("pos","raw_counts")
head(extended)
    extended=matrix(ncol=2,nrow=max_pos)         
    colnames(extended)=c("pos","smooth")
head(extended)
extended$pos=c(seq(1,max_pos))
seq(1,max_pos)
c(seq(1,max_pos))
as.vector(seq(1,10))
    extended=matrix(ncol=2,nrow=max_pos)         
    colnames(extended)=c("pos","smooth")
    extended$pos=as.vector(seq(1,max_pos))
length(seq(1,max_pos)
)
nrow(extended)
    extended=matrix(ncol=2,nrow=max_pos)         
    colnames(extended)=c("pos","smooth")
nrow(extended)
    extended_pos=as.vector(rep(0,max_pos))
    extended_score=as.vector(seq(1,max_pos))
extended_pos
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
extended_pos
extended_score
extended=cbind(extended_pos,extended_smooth)   
extended=cbind(extended_pos,extended_score)
extended
extended_poshead(extended)
head(extended)
colnames(extended)=c("pos","smooth")
head(extended)
counts
chr=1
# Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=max_pos+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
    extended=cbind(extended_pos,extended_score)          
    colnames(extended)=c("pos","smooth")    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
    extended=cbind(extended_pos,extended_score)          
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
    extended=cbind(extended_pos,extended_score)          
    colnames(extended)=c("pos","smooth")
max_pos
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
max_pos
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
max_pos
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
compact
actual_chr=levels(counts$chr)[chr]
actual_chr
counts
colnames(counts)=c("chr","pos","raw_counts")
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
    extended=cbind(extended_pos,extended_score)          
    colnames(extended)=c("pos","smooth")
head(extended)
head(compact)
head(extended)
extended[extended$pos==compact$pos]
extended[extended$pos==compact$pos,]
extended[extended$pos==compact$pos,3]
head(extended$pos)
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
    extended=as.matrix(cbind(extended_pos,extended_score))  
    colnames(extended)=c("pos","smooth")
head(extended$pos)
head(extended)
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
    extended=data.frame(cbind(extended_pos,extended_score))
    colnames(extended)=c("pos","smooth")
    # Fill the positions with the counts
extended$pos
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
    extended=data.frame(cbind(extended_pos,extended_score))
    colnames(extended)=c("pos","smooth")
    # Fill the positions with the counts
extended[extended$pos==compact$pos,]
compact
extended[compact$pos,]
extended[compact$pos,]=compact$raw_counts
extended[compact$pos,]
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_score=as.vector(rep(0,max_pos))
    extended=data.frame(cbind(extended_pos,extended_score))
    colnames(extended)=c("pos","smooth")
    # Fill the positions with the counts
    extended[compact$pos,]=compact$raw_counts
extended
bkde(extended$score,kernel="normal",bandwidth=75)
extended$score
head(extended)
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_smooth=as.vector(rep(0,max_pos))
    extended=data.frame(cbind(extended_pos,extended_smooth))
    colnames(extended)=c("pos","smooth")
    # Fill the positions with the counts
    extended[compact$pos,]=compact$raw_counts
head(extended)
bkde(extended$smooth,kernel="normal",bandwidth=75)
a=bkde(extended$smooth,kernel="normal",bandwidth=75)
plot(a)
compact
    data(geyser, package="MASS")
    x <- cbind(geyser$duration, geyser$waiting)
    est <- bkde2D(x, bandwidth=c(0.7, 7))
    contour(est$x1, est$x2, est$fhat)
midpoint=1
# Get center
        center=compact$pos[midpoint]
        # Apply kernel
        bkde(extended$raw_counts[midpoint],kernel="normal",bandwidth=75)
center
compact
extended$raw_counts[midpoint]
extended$raw_counts
bkde(compact$raw_counts[midpoint],kernel="normal",bandwidth=75)
which.mac(bkde(compact$raw_counts[midpoint],kernel="normal",bandwidth=75)$y)
which.max(bkde(compact$raw_counts[midpoint],kernel="normal",bandwidth=75)$y)
bkde(compact$raw_counts[midpoint],kernel="normal",bandwidth=75,gridsize=300)
        kernel_out=bkde(compact$raw_counts[midpoint],kernel="normal",bandwidth=75,gridsize=300)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
which.max(kernel_smooth)
kernel_type="normal"
bandwidth=75
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],kernel=kernel_type,bandwidth=bandwidth,gridsize=300)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Get maximum
        kernel_peak=which.max(kernel_smooth)
kernel_peak
        # Get center
        center=compact$pos[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],\
                        kernel=kernel_type,bandwidth=bandwidth,gridsize=300)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Get maximum
        kernel_peak=which.max(kernel_smooth)        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,gridsize=300)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Get maximum
        kernel_peak=which.max(kernel_smooth)
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,gridsize=300)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Get maximum
        kernel_peak=which.max(kernel_smooth)
kernel_peak
kernel_grid
trunc(kernel_grid)
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,gridsize=10)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
trunc(kernel_grid)
        # Get center
        center=compact$pos[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,gridsize=500)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        # Get maximum
        kernel_peak=which.max(kernel_smooth)
trunc(kernel_grid)
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,gridsize=1000)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        trunc(kernel_grid)
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,gridsize=750)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        trunc(kernel_grid)
        # Get center
        center=compact$pos[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        range.x=c(-300,300),truncate,gridsize=600)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        trunc(kernel_grid)        # Get center
        center=compact$pos[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=75,
                        range.x=c(-300,300),truncate,gridsize=600)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        # Get center
        center=compact$pos[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=75,
                        range.x=c(-300,300),truncate,gridsize=600)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        trunc(kernel_grid)        # Get center
        center=compact$pos[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        range.x=c(-300,300),truncate,gridsize=600)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        gridsize=600)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        trunc(kernel_grid)
        center=compact$pos[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        gridsize=600)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        kernel_grid=trunc(kernel_grid)
kernel_grid
length(kernel_grid)
kernel_peak=which.max(kernel_smooth)
kernel_smooth
 # Get center
        center=compact$pos[midpoint]
        nreads=compact$raw_counts
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        gridsize=600)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        kernel_grid=trunc(kernel_grid)
        # Get maximum
        kernel_peak=which.max(kernel_smooth)
nreads
        # Get center
        center=compact$pos[midpoint]
        nreads=compact$raw_counts[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        gridsize=600)
        kernel_grid=kernel_out$x
        kernel_smooth=kernel_out$y
        # Truncate grid to get integers and offset
        kernel_grid=trunc(kernel_grid)
        # Get maximum
        kernel_peak=which.max(kernel_smooth)
nreads
        # Get center
        center=compact$pos[midpoint]
        nreads=compact$raw_counts[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        gridsize=601)
        kernel_smooth=kernel_out$y
        # Scale output with number of midpoints
        kernel_smooth=nreads*kernel_smooth
kernel_smooth
positions=seq(-300,601)+center
positions
positions=as.vector(seq(-300,601)+center)
length(positions)
length(kernel_smooth)
kernel_grid=as.vector(seq(-300,601))+center
kernel_grid
 kernel_grid=as.vector(seq(-300,300)+center)
kernel_grid
out=data.frame(kernel_grid,kernel_smooth)
out
matrix(ncol=3)
matrix(ncol=3)->a
rbind(a,out)
out=data.frame(actual_chr,kernel_grid,kernel_smooth)
out
rbind(a,out)
head(out)
out=data.frame(actual_chr,kernel_grid,kernel_smooth,colnames=c("chr","pos","score"))
out=data.frame(actual_chr,kernel_grid,kernel_smooth)
        colnames(out)=c("chr","pos","score")
out
# Initialize output
output=matrix(ncol=3)
colnames(output)=c("chr","pos","score")
output
        output[(output$chr==new_points$chr)&&((output$pos==new_points$pos),]=output$score+new_points$score
        output[(output$chr==new_points$chr)&&(output$pos==new_points$pos),]=output$score+new_points$score 
output=data.frame(ncol=3)
colnames(output)=c("chr","pos","score")
output
output=as.data.frame(matrix(ncol=3))
colnames(output)=c("chr","pos","score")
output
        output[(output$chr==new_points$chr)&&(output$pos==new_points$pos),]=output$score+new_points$score
        new_points=data.frame(actual_chr,kernel_grid,kernel_smooth)
        colnames(new_points)=c("chr","pos","score")
new_points
        output[(output$chr==new_points$chr)&&(output$pos==new_points$pos),]=output$score+new_points$score 
output[output$chr==actual_chr]
output[output$chr==actual_chr,]
output=rbind(output,new_points)
output
    # For every midpoint
    for(midpoint in 1:nrow(compact)){
        # Get center
        center=compact$pos[midpoint]
        nreads=compact$raw_counts[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        gridsize=601)
        kernel_smooth=kernel_out$y
        # Scale output with number of midpoints
        kernel_smooth=nreads*kernel_smooth
        kernel_grid=as.vector(seq(-300,300)+center)
        # Format it
        new_points=data.frame(actual_chr,kernel_grid,kernel_smooth)
        colnames(new_points)=c("chr","pos","score")
        # Join to the rest of data
        output=rbind(output,new_points)
    }
output
# For each chromosome
nchr=nlevels(counts$chr) # Number of chromosomes
for(chr in 1:nchr){
    # Get chr name
    actual_chr=levels(counts$chr)[chr]
    # Select the data belonging to that chr
    compact=counts[counts$chr==actual_chr,]
    # Get maximum coordinates
    max_pos=which.max(compact$pos)
    max_pos=compact$pos[max_pos]
    # Give some wiggle room to kernel
    max_pos=as.numeric(max_pos)+200
    # Initialize all the positions with 0s
    extended_pos=as.vector(seq(1,max_pos))
    extended_smooth=as.vector(rep(0,max_pos))
    extended=data.frame(cbind(extended_pos,extended_smooth))
    colnames(extended)=c("pos","smooth")
    # For every midpoint
    for(midpoint in 1:nrow(compact)){
        # Get center
        center=compact$pos[midpoint]
        nreads=compact$raw_counts[midpoint]
        # Apply kernel
        kernel_out=bkde(compact$raw_counts[midpoint],
                        kernel=kernel_type,bandwidth=bandwidth,
                        gridsize=601)
        kernel_smooth=kernel_out$y
        # Scale output with number of midpoints
        kernel_smooth=nreads*kernel_smooth
        kernel_grid=as.vector(seq(-300,300)+center)
        # Format it
        new_points=data.frame(actual_chr,kernel_grid,kernel_smooth)
        colnames(new_points)=c("chr","pos","score")
        # Join to the rest of data
        output=rbind(output,new_points)
    }
}
output
print(output)
write.table(as.matrix(output),sep="\t",file=stdout,quote=FALSE)
write.table(output,sep="\t",file=stdout,quote=FALSE)
output
as.matrix(output)
